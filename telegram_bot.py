import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest

# KullanÄ±cÄ± bilgilerini saklayacak JSON dosyasÄ±nÄ± aÃ§ma
def load_user_info():
    try:
        with open("user_info.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

def save_user_info(user_info):
    with open("user_info.json", "w") as file:
        json.dump(user_info, file, indent=4)

user_info = load_user_info()

# Start komutu
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # KullanÄ±cÄ±ya bilgilendirme mesajÄ± gÃ¶nder
    await update.message.reply_text(
        "Merhaba! Ben size kanal iÃ§eriÄŸini bir kanaldan diÄŸerine iletmek iÃ§in yardÄ±mcÄ± olacaÄŸÄ±m.\n\n"
        "LÃ¼tfen aÅŸaÄŸÄ±daki adÄ±mlarÄ± takip edin:\n"
        "1. Kaynak kanal ve hedef kanal bilgilerini yazÄ±n.\n"
        "2. Kanal bilgilerini doÄŸru ÅŸekilde girdiÄŸinizde iÅŸlemi gerÃ§ekleÅŸtireceÄŸim.\n\n"
        "Ã–rnek: /set_channels @kaynakkanal @hedefkanal"
    )

# Kanal ID'si veya kullanÄ±cÄ± adÄ± al
async def set_channels(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    user_input = update.message.text.strip().split()

    if len(user_input) == 3 and user_input[0] == '/set_channels':
        source_channel_input = user_input[1]
        target_channel_input = user_input[2]

        # Kanal kullanÄ±cÄ± adÄ± yerine ID kullanÄ±lÄ±yorsa, doÄŸrudan ID'yi kabul edelim
        if source_channel_input.startswith('@'):
            source_channel_id = await get_channel_id(context, source_channel_input)
            if source_channel_id is None:
                await update.message.reply_text("Kaynak kanal kullanÄ±cÄ± adÄ± geÃ§ersiz veya bulunamadÄ±.")
                return
        else:
            source_channel_id = int(source_channel_input)

        if target_channel_input.startswith('@'):
            target_channel_id = await get_channel_id(context, target_channel_input)
            if target_channel_id is None:
                await update.message.reply_text("Hedef kanal kullanÄ±cÄ± adÄ± geÃ§ersiz veya bulunamadÄ±.")
                return
        else:
            target_channel_id = int(target_channel_input)

        # KullanÄ±cÄ± bilgilerini kaydedelim
        user_info[user_id] = {
            "source_channel": source_channel_id,
            "target_channel": target_channel_id
        }
        save_user_info(user_info)

        await update.message.reply_text(
            f"BaÅŸarÄ±yla kanal bilgileri alÄ±ndÄ±!\n"
            f"Kaynak kanal: {source_channel_input} ({source_channel_id})\n"
            f"Hedef kanal: {target_channel_input} ({target_channel_id})"
        )
    else:
        await update.message.reply_text(
            "LÃ¼tfen iki kanal kullanÄ±cÄ± adÄ± ya da ID'si girin. Ã–rnek: /set_channels @kaynakkanal @hedefkanal"
        )

# Kanal kullanÄ±cÄ± adÄ± ile ID almak
async def get_channel_id(context, username):
    try:
        channel = await context.bot.get_chat(username)
        return channel.id
    except Exception as e:
        return None

# MesajlarÄ± kopyalamak iÃ§in handler
async def forward_content(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    
    if user_id not in user_info:
        await update.message.reply_text('LÃ¼tfen Ã¶nce kanal bilgilerini girin.')
        return

    source_channel = user_info[user_id]['source_channel']
    target_channel = user_info[user_id]['target_channel']
    
    # MesajÄ±n kaynak kanalÄ±ndan gelip gelmediÄŸini kontrol et
    if update.message.chat.id != int(source_channel):  # source_channel ID'si doÄŸrulanÄ±r
        return  # EÄŸer kaynaktan gelmiyorsa, iÅŸlem yapÄ±lmaz

    # Kaynak kanalÄ±n linkini al
    source_channel_link = f"t.me/{update.message.chat.username}" if update.message.chat.username else f"Kanala EriÅŸim Yok"

    # Kaynak kanal iÃ§in bilgilendirme mesajÄ± ve buton gÃ¶nder
    try:
        # Buton oluÅŸturuluyor
        keyboard = [
            [InlineKeyboardButton("Yeni Ä°Ã§erike Bak", url=source_channel_link)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            target_channel,
            "ğŸ”” Analiz Kanalimizda Yeni iÃ§erik var! Kanala gÃ¶z atmak iÃ§in butona tÄ±klayÄ±n. ğŸ””",
            reply_markup=reply_markup
        )
    except BadRequest as e:
        await update.message.reply_text(f"Bir hata oluÅŸtu: {e}")
